version: 2.1

commands:
  install_python:
    description: Install Python 3.11
    steps:
      - run:
          name: Install Python 3.11
          command: |
            sudo apt install -y make build-essential libssl-dev zlib1g-dev \
            libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev \
            libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl git
            
            curl https://pyenv.run | bash
            
            echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
            echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
            echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\n eval "$(pyenv init -)"\nfi' >> ~/.bashrc
            exec "$SHELL"
            pyenv install 3.11

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            pip install ansible # Install Ansible

  destroy-environment:
    description: Destroy back-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Delete backend stack
            aws cloudformation delete-stack --stack-name Mock-Payment-API-<< parameters.Workflow_ID >>

  revert-migrations:
    description: Revert the last migration, if any were executed during the current workflow
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              alembic downgrade -1
            fi

jobs:
  build-backend:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - restore_cache:
          keys: mock-payment-deps-{{ checksum "poetry.lock" }}
      - run:
          name: Back-end build
          command: |
            poetry config virtualenvs.in-project true
            poetry install --no-root
      - save_cache:
          paths: [ /.venv ]
          key: mock-payment-deps-{{ checksum "poetry.lock" }}

  deploy-infrastructure:
    docker:
      - image: cimg/aws:2023.09
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Mock-Payment-API \
              --stack-name "Mock-Payment-API-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=Mock-Payment-API-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: [ "8f:de:93:62:b8:ce:d6:81:1e:49:f7:c2:c6:8e:02:a4" ]
      - attach_workspace:
          at: ~/
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # Your code here
      #       exit 1
      - run:
          name: Configure server Ansible play
          command: |
            cd .circleci/ansible
            cat inventory.txt

            ansible-playbook -i inventory.txt configure-server.yml

      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [ backend-build ]
  #      - run:
  #          name: Run migrations
  #          command: |
  #            cd backend
  #            npm install
  #            npm run migrations > migrations_dump.txt
  #            cat migrations_dump.txt
  #      - run:
  #          name: Send migration results to kvdb.io
  #          command: |
  #            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #            then
  #              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
  #            else
  #              echo "No migrations are pending"
  #            fi
  #      - destroy-environment
  #      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - install_python
      - restore_cache:
          keys: [ backend-build ]
      - add_ssh_keys:
          fingerprints: [ "8f:de:93:62:b8:ce:d6:81:1e:49:f7:c2:c6:8e:02:a4" ]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            poetry install
      - run:
          name: Package backend
          command: |
            poetry build
            tar -czf artifact.tar.gz dist/* package*

            cd ..
            cp ./artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
  #      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Get backend url and run Backend smoke test.
          command: |
            # Extract the public IP address for the backend instance
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text)

            # Generate the API URL
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030

            # Performing a get request with curl and checking for "ok" in the response
            if curl -s $API_URL/api/status | grep "ok"
            then
                exit 0
            else
                exit 1
            fi


  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"

            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
      - destroy-environment
      - revert-migrations

workflows:
  my-workflow:
    jobs:
      - build-backend:
          filters:
            branches:
              only: [ main ]
      - deploy-infrastructure:
          requires: [ build-backend ]
          filters:
            branches:
              only: [ main ]
      - configure-infrastructure:
          requires: [ deploy-infrastructure ]
#      - run-migrations:
#          requires: [ configure-infrastructure ]
#      - deploy-frontend:
#          requires: [ run-migrations ]
#      - deploy-backend:
#          requires: [ run-migrations ]
#      - smoke-test:
#          requires: [ deploy-backend, deploy-frontend ]
#      - cloudfront-update:
#          requires: [ smoke-test ]
#      - cleanup:
#          requires: [ cloudfront-update ]
